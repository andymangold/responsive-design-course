---
title: Designing and Building Responsively
---

<h1>Designing &amp; Building Responsively</h1>
<hr />
<p>Class One</p>

<h2>What is Responsive Design?</h2>
<p>
  In theory: the layout, content, and design of a page should change based on the context in which it is viewed.
</p>
<p>
  In practice: creating a set of rules (CSS) that work regardless of size or type of device.
</p>
<p>
  It is a systematic approach to design that more closely resembles software development, which is fundamentally systematic.
</p>

<h2>What we will not be covering:</h2>
<ul>
  <li>
    <strong>Mobile sites.</strong> These are separate versions of websites served specifically to mobile devices. Different code, different assets. Often times they will be at a unique subdomain, such as "m.domain.com".
  </li>
  <li>
    <strong>Mobile apps.</strong> These are programs built in native, non-web technologies to run on mobile devices. Many of the principles of responsive design apply here, but in the context of the respective languages and libraries used to build native apps.
  </li>
  <li>
    <strong>Pre-existing responsive frameworks or libaries.</strong> While there are many responsive grid systems, such as <a href="http://getbootstrap.com/">Bootstrap</a>, we won't be using them throughout this course. They are fundamentally limited in what they can accomplish, and more importantly they limit the ways you will think about how content can be made responsive.
  </li>
</ul>

<h2>How to do it:</h2>
<p>
  Making a responsive design is technically simple. <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries">Media queries</a> allow you to choose styles to apply only when certain rules for viewport dimensions are met.
</p>
<script src="https://gist.github.com/andymangold/fa2df5139821c87e2050.js"></script>
<div class="basic-media-query-example">
  My styles change at different browser sizes!
</div>
</div>
<p>
  The complicated (and fun) part is figuring out how and when to use these media queries.
</p>
<p>
  We’ll return to the technical implementation later, but first we need some context of history.
</p>

<h2>History</h2>
<p class="emphasis">
  When thinking responsively, design and development are necessarily entangled because <em>there are no responsive design tools</em>.<sup><a href="#footnote-1">1</a></sup>
</p>

<%= image_tag "ai-new-document.png" %>
<div class="caption">
  The new document window in Adobe Illustrator.
</div>
<%= image_tag "ai-artboards.png" %>
<div class="caption">
  A view of an artboard in Adobe Illustrator.
</div>
<%= image_tag "opticon-layout.jpg" %>
<div class="caption">
  Photo-lettering artists compose layouts on a device called an &ldquo;Opticon&rdquo;.
</div>
<p>
  Web designers who cannot write basic code often never directly touch the finished products they&rsquo;re designing. Their role is largely to provide instructions to their team members for how the website should be built. These instructions usually take the form of images, which are very informative for static designs. However, there is no effective way to communicate a responsive design, partially due to a lack of good tools. The best way to explain how a page should behave across a variety of screen sizes is to <em>build it</em>.
<p>
  Graphic Designers carried over their knowledge and process from print design to the web. The foundations of graphic design are rooted in the idea of a size and format. Prior to the web, the idea of designing something to work across multiple sizes didn’t exist. We can’t blame them for it, but the first thing designers did to start exerting their control over webpages was give them a size so they could fit existing design tools and approaches. This was a step backwards we’re still recovering from.
</p>
<p>
  http://www.theguardian.com/technology/2012/feb/19/john-naughton-webpage-obesity
</p>
<p>
  Proper responsive design and development requires that we change the way we think about design. Other fields of design focus on creating a “thing”, such as a poster, a logo, or an advertisement. With the web, we cannot design a “thing” instead we must design a system. We write the CSS, which is a set of rules, and then the CSS designs the page at every screen size. In some ways this is the first thing we’re expected to design this way, and it is a big departure from the classic modes and processes of graphic design.
</p>

<h2>Why impose widths or include breakpoints at all?</h2>

<p>
  Unstyled html already works on any screen size. Responsive design is not a matter of <em>making</em> the page work across different devices, it’s a matter of <em>not breaking</em> the page on different devices.
</p>
<%= partial(:external_website, :locals => {:url => "http://tilde.club/~faq/"}) %>
<p>
  Or as one designer puts it:
</p>
<%= partial(:external_website, :locals => {:url => "http://motherfuckingwebsite.com/"}) %>
<p class="emphasis">
  The reasons to impose a width are not just aesthetic, they are practical.
</p>

<h3>Measure</h3>
<p>
  In typography, the length of a line of text is called its measure. While there is variation depending on context and typeface used, there are best practices for readable, legible text. Setting a reasonable measure for reading is one of the biggest reasons we’ll be forced to impose widths/max-widths on elements and employ breakpoints.
</p>
<blockquote>
  “Anything from 45 to 75 characters is widely regarded as a satisfactory length of line for a single-column page set in a serifed text face in a text size. The 66-character line (counting both letters and spaces) is widely regarded as ideal. For multiple column work, a better average is 40 to 50 characters.”
</blockquote>
<p>The Elements of Typographic Style, Robert Bringhurst</p>
<pre><code>{{Show example of unstyled text getting too wide}}</code></pre>

<h3>Content visibility</h3>
<p>
  Certain elements, like images, have a fixed aspect ratio. When these elements are used on a page, the shape of the window can dramatically change the amount of content that is visible. Imposing widths/max-widths will help us make sure that the around amount of content is shown within the viewport at any screen size.
</p>
<code>
  {{Example of large image spanning the full width of the page}}
</code>

<h3>Economy of space</h3>
<p>
  Now that we’ve established that both images and text can’t be allowed to span the full width of the viewport for practical reasons, we must face the fact that at many screen sizes our primary text or images will only be a portion of the width of the window. In order to use space efficiently, we’ll often end up putting other content in the space created by the narrow elements. This is how some of the most typical website layouts, such as masonry grids and side navigation, came to be.
</p>
<code>
  {{Examples of popular websites in iFrames that exhibit this}}
</code>

<h2>Basics of Technical Implementation</h2>
<code>{{example of media query in code}}</code>
<code>{{example of resulting code from media query}}</code>

<code>{{example inside of a selector}}</code>
<code>{{example wrapped around a selector}}</code>

<code><meta name=“viewport” content=“width=device-width, initial-scale=1”></code>
<p>Explain why this is necessary!</p>


<h2>A note on units</h2>
<ul>
  <li>
    <strong>px:</strong> Absolute. Pretty straightforward, except on retina devices where a pixel is no longer a pixel :(
    <code>{{Example of px values}}</code>
  </li>
  <li>
    <strong>pt:</strong> Also absolute, carry over from print. I don’t recommend using pts.
  </li>
  <li>
    <strong>%:</strong> Relative. This unit means different things in certain contexts, but for the most part it is the percentage of the inherited value that you would like the selector to assume.
    <code>{{Example of % values}}</code>
  </li>
  <li>
    <strong>em:</strong> Relative. 1em = the inherited or declared font-size of the selector. This is like a powerful little variable built directly into CSS with no pre-processing required.
  </li>
  <li>
    <strong>rem:</strong> Relative. This behaves exactly like the em unit, except it inherits directly from the root selector (html).
  </li>
</ul>

<p>
  Although the units are strictly speaking interchangeable, in almost every instance there is a unit that makes the most sense given the system you are designing. When you’re designing your CSS you want to make it as easy as possible to change your mind in the future about your design decisions. Choosing the right units makes your whole page flexible, so that you can change certain decisions, such as the text size, or overall page margin, without breaking things.
</p>

<h2>Exercise 1:</h2>
<p>
  Use your new skills to create a simple, fully responsive layout for the provided article, using the minimum number of breakpoints.
</p>

<hr />
<p>Class Two</p>

<h2>Schedule</h2>
<ul>
  <li>Review Exercise 1</li>
  <li>Reiterate the messages taught above</li>
  <li>Answer questions</li>
  <li>Talk about efficient and inefficient use of media queries</li>
  <li>Code health! What usage of media queries is easy to read and understand to someone new to the project?</li>
</ul>

<h2>Efficient Use of Media Queries</h2>

<code>
  {{Example of project where media queries are used at root level, one for each size}}
</code>
<code>
  {{Example of project where media queries are nested within selectors}}
</code>
<p>
  Lesson: Media queries belong at the level of nesting where the change in the system is taking place. A good rule of thumb is that the media query should be placed inside the first element whose attributes are changing at a specific breakpoint. If its children also change at that same breakpoint, those selectors should be nested inside of the media query.
</p>
<p>
  Mobile first vs. Desktop first, reading from the breakpoints.
</p>
<p>
  How to choose a breakpoint (actual value)
</p>

<h2>Exercise 2:</h2>
<p>
  Create a responsive layout (reusable page template including navigation) for the provided content.
</p>


<hr />
<p>Class Three</p>

<h2>Schedule</h2>
<ul>
  <li>Reiterate the messages taught above</li>
  <li>Answer questions</li>
  <li>Talk about variables and how they relate to media queries.</li>
  <li>Using variables for breakpoints</li>
  <li>Named breakpoints based on device (mobile, tablet, desktop)</li>
  <li>Named breakpoints based on context (blog-page-breakpoint, etc.)</li>
  <li>Responsive design and flexbox!</li>
</ul>

<h2>Exercise 3</h2>
<p>
  Create a responsive website for the provided content, including tabular data, paragraphs of text, lists, images, and forms.
</p>

<hr />
<p>Class Four</p>

<h2>Schedule</h2>
<ul>
  <li>Reiterate the messages taught above</li>
  <li>Answer questions</li>
  <li>Talk about other changes that need to happen to the design on small screens besides things just getting smaller. Touch devices require larger hit areas for links, additional indication of what is interactive because hover states aren’t available.</li>
</ul>


<h1>Footnotes</h1>
<p>
  <a name="footnote-1">1:</a> Many design tools are trying to accomodate responsive thinking, such as <a href="http://macaw.co/">Macaw</a> and <a href="https://creative.adobe.com/products/reflow">Adobe Edge Reflow</a>, but they are not widely used.
</p>
